/* ===== COACH.JS - Coach Interface Logik mit OpenAI Integration ===== */

// OpenAI Assistant Integration
let currentThreadId = null;
let aiProcessing = false;

// Coach-spezifische Funktionen
const CoachInterface = {
    init() {
        this.setupTabs();
        this.renderClients();
        this.renderPrompts();
        this.updatePromptStats();
        this.setupCategoryFilter();
        this.setupCollaborationMonitor();
        
        console.log('üéØ Coach Interface initialisiert');
    },

    // Tab-Navigation
    setupTabs() {
        DOM.findAll('.tab-btn').forEach(btn => {
            DOM.on(btn, 'click', () => {
                const targetTab = btn.getAttribute('data-tab');
                this.showTab(targetTab);
            });
        });
    },

    showTab(tabName) {
        // Alle Tabs deaktivieren
        DOM.findAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        DOM.findAll('.tab-content').forEach(content => content.classList.remove('active'));
        
        // Gew√§hlten Tab aktivieren
        const tabBtn = DOM.find(`[data-tab="${tabName}"]`);
        const tabContent = DOM.find(`#${tabName}Tab`);
        
        if (tabBtn && tabContent) {
            tabBtn.classList.add('active');
            tabContent.classList.add('active');
        }
    },

    // Klienten-Management
    renderClients() {
        const container = DOM.find('#clientsContainer');
        if (!container || !window.clients) return;

        DOM.empty(container);
        
        window.clients.forEach(client => {
            const clientCard = DOM.create('div', {
                className: 'client-card',
                'data-client-id': client.id,
                innerHTML: `
                    <div style="font-size: 1.3rem; font-weight: 700; color: #1e293b; margin-bottom: 8px;">
                        ${client.name}
                    </div>
                    <div style="color: #64748b; margin-bottom: 12px;">
                        <span style="font-weight: 600; color: #3b82f6;">${client.age} Jahre</span> ‚Ä¢ ${client.profession}
                    </div>
                    <div style="display: flex; flex-wrap: wrap; gap: 6px;">
                        ${client.topics.map(topic => 
                            `<span style="background: rgba(59,130,246,0.1); color: #3b82f6; padding: 4px 10px; border-radius: 20px; font-size: 0.8rem;">${topic}</span>`
                        ).join('')}
                    </div>
                `
            });

            DOM.on(clientCard, 'click', () => this.selectClient(client.id));
            container.appendChild(clientCard);
        });
    },

    selectClient(clientId) {
        const client = window.clients.find(c => c.id === clientId);
        if (!client) return;

        window.coachingApp.selectedClient = client;
        
        // Visual feedback
        DOM.findAll('.client-card').forEach(card => {
            card.classList.remove('selected');
        });
        DOM.find(`[data-client-id="${clientId}"]`).classList.add('selected');
        
        // Session-Button anzeigen
        const startBtn = DOM.find('#startSessionBtn');
        if (startBtn) {
            startBtn.style.display = 'block';
            Utils.animateElement(startBtn, 'fade-in');
        }
        
        Utils.showToast(`Klient ausgew√§hlt: ${client.name}`, 'success');
        console.log('‚úÖ Klient ausgew√§hlt:', client.name);
    },

    // Prompt-Management
    renderPrompts() {
        const container = DOM.find('#promptsContainer');
        const categoryFilter = DOM.find('#categoryFilter').value || '';
        
        if (!container || !window.prompts) return;

        const filteredPrompts = Object.entries(window.prompts).filter(([key, prompt]) => {
            return !categoryFilter || prompt.category === categoryFilter;
        });

        DOM.empty(container);
        
        filteredPrompts.forEach(([key, prompt]) => {
            const promptCard = DOM.create('div', {
                className: 'prompt-card',
                innerHTML: `
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                        <strong style="color: #3b82f6; font-size: 1.1rem;">${key}</strong>
                        <span class="category-tag">${prompt.category}</span>
                    </div>
                    <div style="font-weight: 600; color: #374151; margin-bottom: 8px;">
                        ${prompt.description}
                    </div>
                    <div style="font-size: 0.9rem; color: #64748b; line-height: 1.4;">
                        ${Utils.truncateText(prompt.text, 100)}
                    </div>
                `
            });

            DOM.on(promptCard, 'click', () => this.usePrompt(key));
            container.appendChild(promptCard);
        });

        this.updatePromptStats();
    },

    usePrompt(promptKey) {
        const prompt = window.prompts[promptKey];
        if (!prompt) return;

        window.coachingApp.currentPrompt = prompt;
        const editor = DOM.find('#promptEditor');
        
        if (editor) {
            editor.value = `${promptKey}: ${prompt.description}\n\n${prompt.text}`;
            Utils.animateElement(editor, 'fade-in');
        }
        
        Utils.showToast(`Prompt geladen: ${promptKey}`, 'success');
        console.log('‚úÖ Prompt geladen:', promptKey);
    },

    updatePromptStats() {
        const statsElement = DOM.find('#promptStats');
        if (!statsElement || !window.prompts) return;

        const totalPrompts = Object.keys(window.prompts).length;
        const categories = [...new Set(Object.values(window.prompts).map(p => p.category))];
        
        statsElement.innerHTML = `
            <strong>Prompts verf√ºgbar: ${totalPrompts}</strong><br>
            <span style="font-size: 0.9rem; color: #64748b;">
                Kategorien: ${categories.join(', ')} | 
                GT: ${Object.values(window.prompts).filter(p => p.category === 'GT').length} | 
                SF: ${Object.values(window.prompts).filter(p => p.category === 'SF').length} | 
                DIAG: ${Object.values(window.prompts).filter(p => p.category === 'DIAG').length} | 
                L√ñS: ${Object.values(window.prompts).filter(p => p.category === 'L√ñS').length}
            </span>
        `;
    },

    setupCategoryFilter() {
        const filter = DOM.find('#categoryFilter');
        if (!filter || !window.prompts) return;

        const categories = [...new Set(Object.values(window.prompts).map(p => p.category))];
        
        categories.forEach(category => {
            const option = DOM.create('option', {
                value: category,
                textContent: `${category} (${Object.values(window.prompts).filter(p => p.category === category).length})`
            });
            filter.appendChild(option);
        });
        
        DOM.on(filter, 'change', () => this.renderPrompts());
    },

    // Kollaboration
    setupCollaborationMonitor() {
        if (!window.coachingComm) return;

        // Status-Updates √ºberwachen
        window.coachingComm.onStatusChange((status) => {
            const statusElement = DOM.find('#connectionStatus');
            if (statusElement) {
                statusElement.textContent = status;
            }
        });

        // Nachrichten-Updates √ºberwachen
        window.coachingComm.onMessagesUpdate((messages) => {
            this.updateCollaborationDisplay(messages);
        });
    },

    updateCollaborationDisplay(messages) {
        const container = DOM.find('#collaborationMessages');
        if (!container) return;

        if (messages.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; color: #64748b; padding: 40px;">
                    Hier sehen Sie den Dialog zwischen Coach und Coachee.<br>
                    √ñffnen Sie das Kollaborations-Fenster f√ºr den Coachee.
                </div>
            `;
            
            // Actions ausblenden wenn keine Nachrichten
            const actions = DOM.find('#collaborationActions');
            if (actions) {
                actions.style.display = 'none';
            }
            return;
        }

        DOM.empty(container);
        
        messages.forEach(message => {
            const messageDiv = DOM.create('div', {
                className: `message ${message.sender.toLowerCase().replace(/[^a-z]/g, '')}`,
                innerHTML: `
                    <div style="display: flex; justify-content: space-between; margin-bottom: 12px;">
                        <span style="font-weight: bold; color: #3b82f6;">${this.getSenderDisplay(message.sender)}</span>
                        <span style="color: #64748b; font-size: 0.9rem;">${Utils.formatTime(message.timestamp)}</span>
                    </div>
                    <div style="line-height: 1.6;">${Utils.escapeHtml(message.content)}</div>
                `
            });
            container.appendChild(messageDiv);
        });

        MessageHelpers.scrollToBottom(container);
        
        // Actions anzeigen wenn Nachrichten vorhanden
        this.showCollaborationActions();
    },

    getSenderDisplay(sender) {
        const mapping = {
            'coach': 'üë®‚Äçüíº Coach',
            'coachee': 'üë§ Coachee', 
            'system': 'üéØ System',
            'kicoach': 'ü§ñ KI-Coach',
            'ki-coach': 'ü§ñ KI-Coach',
            'openaicoach': 'üöÄ OpenAI Coach'
        };
        
        const key = sender.toLowerCase().replace(/[^a-z]/g, '');
        return mapping[key] || sender;
    },

    showCollaborationActions() {
        const actions = DOM.find('#collaborationActions');
        if (actions) {
            actions.style.display = 'flex';
            actions.innerHTML = `
                <button onclick="sendDialogToAI()" class="send-ai-btn">
                    ü§ñ Dialog an lokale KI
                </button>
                <button onclick="sendDialogToOpenAI()" class="send-ai-btn" style="background: linear-gradient(135deg, #10b981, #059669);">
                    üöÄ Dialog an OpenAI
                </button>
                <button onclick="openCollaborationWindow()" class="open-collab-btn">
                    üîó Kollaborations-Fenster √∂ffnen
                </button>
                <button onclick="editPrompt()" class="edit-btn">
                    ‚úèÔ∏è Zur√ºck zum Editor
                </button>
            `;
        }
    },

    // Coach-KI
    setupCoachKI() {
        // Schnellzugriff-Buttons
        const processBtn = DOM.find('[onclick="loadProcessSupport()"]');
        const methodsBtn = DOM.find('[onclick="loadMethodenBeratung()"]');
        const interventionBtn = DOM.find('[onclick="loadInterventionshilfe()"]');
        const emergencyBtn = DOM.find('[onclick="loadNotfallSupport()"]');

        if (processBtn) DOM.on(processBtn, 'click', () => this.loadProcessSupport());
        if (methodsBtn) DOM.on(methodsBtn, 'click', () => this.loadMethodenBeratung());
        if (interventionBtn) DOM.on(interventionBtn, 'click', () => this.loadInterventionshilfe());
        if (emergencyBtn) DOM.on(emergencyBtn, 'click', () => this.loadNotfallSupport());
    },

    // Coach-KI Load-Funktionen korrigiert
    loadProcessSupport() {
        const input = DOM.find('#coachInput');
        const phase = DOM.find('#sessionPhase');
        
        if (input) input.value = 'Ich brauche Unterst√ºtzung bei der Prozesssteuerung. Wo stehen wir gerade und was ist der beste n√§chste Schritt?';
        if (phase) phase.value = 'Meta: Prozessreflexion';
        
        console.log('üîß Prozess-Support geladen');
    },

    loadMethodenBeratung() {
        const input = DOM.find('#coachInput');
        if (input) input.value = 'Welche Coaching-Methode oder Intervention w√§re jetzt am passendsten f√ºr meinen Coachee?';
        
        console.log('üõ†Ô∏è Methoden-Beratung geladen');
    },

    loadInterventionshilfe() {
        const input = DOM.find('#coachInput');
        if (input) input.value = 'Mein Coachee zeigt [Verhalten/Reaktion]. Wie gehe ich damit professionell um?';
        
        console.log('üéØ Interventionshilfe geladen');
    },

    loadNotfallSupport() {
        const input = DOM.find('#coachInput');
        const urgency = DOM.find('#urgency');
        
        if (input) input.value = 'NOTFALL: Ich erkenne Warnsignale bei meinem Coachee und brauche sofortige Handlungsempfehlungen.';
        if (urgency) urgency.value = 'Notfall';
        
        console.log('üö® Notfall-Support geladen');
    }
};

// ===== OPENAI ASSISTANT INTEGRATION =====

// OpenAI Assistant API Call
async function generateOpenAIResponse(message, context) {
    if (aiProcessing) {
        Utils.showToast('KI verarbeitet bereits eine Anfrage...', 'info');
        return null;
    }

    aiProcessing = true;
    
    try {
        const response = await fetch('/api/openai-assistant', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: message,
                threadId: currentThreadId,
                context: context
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        
        // Thread ID f√ºr kontinuierliche Gespr√§che speichern
        if (data.threadId) {
            currentThreadId = data.threadId;
        }

        return data.response;
        
    } catch (error) {
        console.error('OpenAI API Error:', error);
        Utils.showToast('OpenAI nicht verf√ºgbar. Fallback wird verwendet.', 'error');
        
        // Fallback zur lokalen KI-Antwort
        return generateAIResponse(message, []);
        
    } finally {
        aiProcessing = false;
    }
}

// Globale Funktionen f√ºr HTML-Aufrufe
window.startSession = function() {
    if (!window.coachingApp.selectedClient) {
        Utils.showToast('Bitte w√§hlen Sie zuerst einen Klienten aus.', 'error');
        return;
    }
    
    // OpenAI Thread f√ºr neue Session zur√ºcksetzen
    currentThreadId = null;
    
    // Messages bei neuer Session leeren
    if (window.coachingComm) {
        window.coachingComm.clearMessages();
        console.log('üóëÔ∏è Messages f√ºr neue Session geleert');
    }
    
    CoachInterface.showTab('coaching');
    SessionTimer.start();
    
    if (window.coachingComm) {
        window.coachingComm.addMessage('System', `Session gestartet f√ºr ${window.coachingApp.selectedClient.name}`, 'system');
    }
    
    Utils.showToast(`Session gestartet f√ºr ${window.coachingApp.selectedClient.name}`, 'success');
    console.log('üöÄ Session gestartet f√ºr:', window.coachingApp.selectedClient.name);
};

window.sendToCollaboration = function() {
    const editor = DOM.find('#promptEditor');
    const content = editor?.value?.trim();
    
    if (!content) {
        Utils.showToast('Bitte geben Sie einen Prompt ein.', 'error');
        return;
    }
    
    if (!window.coachingComm) {
        Utils.showToast('Kommunikation nicht verf√ºgbar.', 'error');
        return;
    }
    
    // Nachricht zur Kollaboration senden
    window.coachingComm.addMessage('Coach', content);
    
    // Zur Kollaborations-Tab wechseln
    CoachInterface.showTab('collaboration');
    
    Utils.showToast('Prompt an Coachee gesendet', 'success');
    console.log('‚úÖ Prompt an Kollaboration gesendet');
};

// "Dialog an lokale KI senden" Funktion
window.sendDialogToAI = function() {
    const messages = window.coachingComm?.getMessages() || [];
    
    if (messages.length === 0) {
        Utils.showToast('Keine Nachrichten zum Senden vorhanden.', 'error');
        return;
    }
    
    // Dialog zu KI-readable Format konvertieren
    const dialog = messages.map(msg => `${msg.sender}: ${msg.content}`).join('\n\n');
    
    // Intelligente KI-Antwort basierend auf Dialog generieren
    const aiResponse = generateAIResponse(dialog, messages);
    
    // KI-Antwort zur Kollaboration hinzuf√ºgen
    window.coachingComm.addMessage('ü§ñ Lokale KI', aiResponse);
    
    Utils.showToast('Dialog an lokale KI gesendet - Antwort erhalten!', 'success');
    console.log('ü§ñ Lokale KI-Antwort generiert f√ºr Dialog');
};

// "Dialog an OpenAI senden" Funktion
window.sendDialogToOpenAI = async function() {
    const messages = window.coachingComm?.getMessages() || [];
    
    if (messages.length === 0) {
        Utils.showToast('Keine Nachrichten zum Senden vorhanden.', 'error');
        return;
    }

    // Button-Status √§ndern
    const button = document.querySelector('[onclick="sendDialogToOpenAI()"]');
    if (button) {
        button.textContent = 'üöÄ OpenAI denkt...';
        button.disabled = true;
    }

    try {
        // Dialog zu strukturiertem Format konvertieren
        const dialog = messages.map(msg => `${msg.sender}: ${msg.content}`).join('\n\n');
        
        // Kontext f√ºr bessere KI-Antworten
        const context = {
            clientName: window.coachingApp.selectedClient?.name || 'Unbekannt',
            clientTopics: window.coachingApp.selectedClient?.topics || [],
            sessionPhase: 'Dialog-Analyse',
            messageCount: messages.length,
            lastSender: messages[messages.length - 1]?.sender
        };

        // OpenAI Assistant aufrufen
        const aiResponse = await generateOpenAIResponse(dialog, context);
        
        if (aiResponse) {
            // KI-Antwort zur Kollaboration hinzuf√ºgen
            window.coachingComm.addMessage('üöÄ OpenAI Coach', aiResponse);
            Utils.showToast('OpenAI Assistant Antwort erhalten!', 'success');
        }

    } catch (error) {
        console.error('Error sending to OpenAI:', error);
        Utils.showToast('Fehler beim Senden an OpenAI.', 'error');
        
    } finally {
        // Button zur√ºcksetzen
        if (button) {
            button.textContent = 'üöÄ Dialog an OpenAI';
            button.disabled = false;
        }
    }
};

// "An KI senden" Funktion - schickt den kompletten Dialog an die KI
window.sendToAI = function() {
    // Umleitung zur neuen Funktion
    sendDialogToAI();
};

// KI-Antwort basierend auf Dialogverlauf generieren (LOKALE KI)
function generateAIResponse(dialog, messages) {
    const lastMessage = messages[messages.length - 1];
    const dialogLower = dialog.toLowerCase();
    
    // Analyse des Dialogs
    if (dialogLower.includes('gt1') || dialogLower.includes('anliegen')) {
        return `Vielen Dank f√ºr das Vertrauen, dass Sie Ihr Anliegen mit mir teilen. Was Sie beschreiben, zeigt wichtige Reflexions- und Entwicklungsbereitschaft. 

Ich h√∂re heraus, dass Sie bereit sind, strukturiert an diesem Thema zu arbeiten. Das ist bereits eine wertvolle Ressource.

Zur Vertiefung: Wenn Sie Ihre Situation in einem Bild beschreiben m√ºssten - welches Bild w√ºrden Sie w√§hlen? Was w√ºrde dieses Bild √ºber Ihr Anliegen aussagen?`;
    }
    
    if (dialogLower.includes('wunderfrage') || dialogLower.includes('wunder')) {
        return `Diese Wunderfrage √∂ffnet wichtige Perspektiven! Ihre Antwort zeigt mir, dass Sie bereits eine klare Vorstellung von der gew√ºnschten Zukunft haben.

Besonders wertvoll finde ich [konkretes Detail aus der Antwort]. Das zeigt mir Ihre Klarheit √ºber das Ziel.

N√§chster Schritt: Was von dem, was Sie im "Wunder-Zustand" beschrieben haben, ist heute - auch nur in kleinen Ans√§tzen - bereits vorhanden?`;
    }
    
    if (dialogLower.includes('ressourcen') || dialogLower.includes('st√§rken')) {
        return `Ich bin beeindruckt von den Ressourcen, die Sie mitbringen! Sie untersch√§tzen vermutlich Ihre F√§higkeiten.

Besonders die [erw√§hnte St√§rke] ist eine echte Superkraft, die Ihnen in Ihrer aktuellen Situation sehr helfen kann.

Frage zur Vertiefung: Wie k√∂nnten Sie diese St√§rke noch gezielter f√ºr Ihr aktuelles Anliegen einsetzen? Was w√ºrde sich dadurch ver√§ndern?`;
    }
    
    if (dialogLower.includes('hindernis') || dialogLower.includes('widerstand')) {
        return `Danke f√ºr diese ehrliche Reflexion √ºber m√∂gliche Hindernisse. Das zeigt Ihre realistische Einsch√§tzung und Vorausplanung.

Ich sehe in dem, was Sie als "Hindernis" beschreiben, auch einen Teil von Ihnen, der Sie sch√ºtzen m√∂chte. Jeder Widerstand hat meist eine positive Absicht.

Lassen Sie uns erkunden: Wenn dieses Hindernis Ihr Freund w√§re - was w√ºrde es Ihnen Gutes tun wollen? Wovor m√∂chte es Sie bewahren?`;
    }
    
    // Standard-Antwort basierend auf letzter Nachricht
    if (lastMessage && lastMessage.sender === 'Coachee') {
        return `Vielen Dank f√ºr diese offene Antwort. Ich merke, wie Sie sich Gedanken machen und reflektieren - das ist ein wichtiger Teil des Coaching-Prozesses.

Was Sie beschreiben, zeigt mir Ihre Bereitschaft zur Ver√§nderung und gleichzeitig eine gesunde Vorsicht. Beides ist wertvoll.

Meine Beobachtung: Sie haben bereits mehr Klarheit √ºber Ihr Thema, als Sie vielleicht denken. 

Um den n√§chsten Schritt zu finden: Was f√ºhlt sich f√ºr Sie als der nat√ºrlichste n√§chste Schritt an?`;
    }
    
    return `Ich sch√§tze die Offenheit und Tiefe unseres Gespr√§chs. Ihre Bereitschaft zur Reflexion und Ihr Mut, sich diesen Fragen zu stellen, sind bemerkenswert.

Was ich in unserem Dialog wahrnehme: Sie sind bereits auf einem guten Weg und haben mehr Ressourcen, als Sie sich vielleicht bewusst sind.

Lassen Sie uns gemeinsam den n√§chsten Schritt erkunden. Was resoniert am st√§rksten mit Ihnen aus unserem bisherigen Gespr√§ch?`;
}

// Prompt Editor zur√ºck
window.editPrompt = function() {
    CoachInterface.showTab('coaching');
};

window.clearEditor = function() {
    const editor = DOM.find('#promptEditor');
    if (editor) {
        editor.value = '';
        Utils.showToast('Editor geleert', 'info');
    }
};

// LOKALE Coach-KI Funktion
window.askCoachKI = function() {
    const input = DOM.find('#coachInput');
    const phase = DOM.find('#sessionPhase');
    const coacheeType = DOM.find('#coacheeType');
    const urgency = DOM.find('#urgency');
    
    if (!input?.value?.trim()) {
        Utils.showToast('Bitte beschreiben Sie Ihre Coaching-Situation.', 'error');
        return;
    }
    
    const response = CoachKI.generateResponse(
        input.value.trim(),
        phase?.value || '',
        coacheeType?.value || '',
        urgency?.value || ''
    );
    
    CoachKI.displayResponse(response);
    Utils.showToast('Lokale Coach-KI Antwort generiert', 'success');
    
    console.log('üß† Lokale Coach-KI Response:', response);
};

// OPENAI Coach-KI Funktion
window.askOpenAICoach = async function() {
    const input = DOM.find('#coachInput');
    const phase = DOM.find('#sessionPhase');
    const coacheeType = DOM.find('#coacheeType');
    const urgency = DOM.find('#urgency');
    
    if (!input?.value?.trim()) {
        Utils.showToast('Bitte beschreiben Sie Ihre Coaching-Situation.', 'error');
        return;
    }

    // Button-Status √§ndern
    const button = document.querySelector('[onclick="askOpenAICoach()"]');
    if (button) {
        button.textContent = 'üöÄ OpenAI denkt...';
        button.disabled = true;
    }

    try {
        const context = {
            clientName: window.coachingApp.selectedClient?.name || 'Unbekannt',
            clientTopics: window.coachingApp.selectedClient?.topics || [],
            sessionPhase: phase?.value || '',
            coacheeType: coacheeType?.value || '',
            urgency: urgency?.value || '',
            requestType: 'coach-supervision'
        };

        const aiResponse = await generateOpenAIResponse(input.value.trim(), context);
        
        if (aiResponse) {
            // OpenAI Antwort anzeigen
            const response = {
                category: 'OPENAI COACH',
                content: aiResponse
            };
            
            CoachKI.displayResponse(response);
            Utils.showToast('OpenAI Coach-KI Antwort erhalten!', 'success');
        }

    } catch (error) {
        console.error('Error with OpenAI Coach:', error);
        Utils.showToast('Fehler bei OpenAI. Lokale Coach-KI verwenden.', 'error');
        
    } finally {
        // Button zur√ºcksetzen
        if (button) {
            button.textContent = 'üöÄ OpenAI Coach-KI';
            button.disabled = false;
        }
    }
};

window.clearCoachInput = function() {
    const input = DOM.find('#coachInput');
    const responseDiv = DOM.find('#coachKIResponse');
    
    if (input) input.value = '';
    if (responseDiv) responseDiv.style.display = 'none';
    
    Utils.showToast('Eingabe geleert', 'info');
};

// Coach-KI Logic (LOKALE KI)
const CoachKI = {
    generateResponse(input, phase, coacheeType, urgency) {
        const inputLower = input.toLowerCase();
        
        // Notfall-Situationen erkennen
        if (inputLower.includes('suizid') || inputLower.includes('selbstverletzung') || urgency === 'Notfall') {
            return {
                category: 'NOTFALL',
                content: `<strong>üö® NOTFALL-PROTOKOLL:</strong><br><br>
                1. <strong>Sofortige Sicherstellung:</strong> Direkt ansprechen und Sicherheit evaluieren<br>
                2. <strong>Professionelle Hilfe:</strong> Umgehend an Krisenintervention/Therapeuten weiterleiten<br>
                3. <strong>Dokumentation:</strong> Gespr√§ch dokumentieren, Ma√ünahmen festhalten<br>
                4. <strong>Nachsorge:</strong> Follow-up vereinbaren, weitere Unterst√ºtzung organisieren<br><br>
                <em>‚ö†Ô∏è Dies √ºberschreitet die Coaching-Grenzen. Therapeutische Intervention erforderlich.</em>`
            };
        }
        
        // Prozess-Support
        if (inputLower.includes('prozess') || inputLower.includes('stuck') || inputLower.includes('weiter')) {
            return {
                category: 'PROZESS',
                content: `<strong>‚öôÔ∏è Prozess-Empfehlung f√ºr ${phase}:</strong><br><br>
                Basierend auf "${phase}" und Coachee-Typ "${coacheeType}" empfehle ich:<br><br>
                ‚Ä¢ <strong>Aktuelle Situation:</strong> Kurze Standortbestimmung mit dem Coachee<br>
                ‚Ä¢ <strong>N√§chster Schritt:</strong> ${this.getNextStepRecommendation(phase)}<br>
                ‚Ä¢ <strong>Methodenvorschlag:</strong> ${this.getMethodRecommendation(phase, coacheeType)}<br>
                ‚Ä¢ <strong>Zeitrahmen:</strong> ca. 15-20 Minuten f√ºr diese Intervention<br><br>
                <em>üí° Tipp: Bei Widerstand zun√§chst w√ºrdigen, dann alternative Herangehensweise anbieten.</em>`
            };
        }
        
        // Methoden-Beratung
        if (inputLower.includes('methode') || inputLower.includes('technik') || inputLower.includes('intervention')) {
            return {
                category: 'METHODIK',
                content: `<strong>üõ†Ô∏è Methodische Empfehlung:</strong><br><br>
                F√ºr Ihre Situation in "${phase}" mit "${coacheeType}" eignen sich:<br><br>
                1. <strong>Prim√§r-Methode:</strong> ${this.getPrimaryMethod(inputLower, phase)}<br>
                2. <strong>Fallback-Option:</strong> Falls Widerstand auftritt<br>
                3. <strong>Vertiefung:</strong> Bei besonders guter Resonanz<br><br>
                <strong>Konkrete Anwendung:</strong><br>
                ${this.getConcreteApplication(inputLower, coacheeType)}<br><br>
                <em>üìã Dokumentation: Notieren Sie die Wirksamkeit f√ºr zuk√ºnftige Sessions.</em>`
            };
        }
        
        // Widerstand/schwierige Situationen
        if (inputLower.includes('widerstand') || inputLower.includes('schwierig') || inputLower.includes('blockiert')) {
            return {
                category: 'WIDERSTAND',
                content: `<strong>üéØ Widerstandsarbeit:</strong><br><br>
                <strong>W√ºrdigender Ansatz:</strong><br>
                "Ich merke, dass hier etwas in Ihnen z√∂gert/bremst. Das ist v√∂llig berechtigt und sch√ºtzt Sie wahrscheinlich vor etwas. M√∂gen Sie mir erz√§hlen, was diese innere Stimme zu bedenken gibt?"<br><br>
                <strong>Positive Absicht erkunden:</strong><br>
                ‚Ä¢ Was will dieser Anteil f√ºr Sie Gutes?<br>
                ‚Ä¢ Vor was sch√ºtzt er Sie?<br>
                ‚Ä¢ Welche Erfahrungen stehen dahinter?<br><br>
                <strong>Integration statt √úberwindung:</strong><br>
                Ziel ist nicht, den Widerstand zu brechen, sondern zu verstehen und zu integrieren.<br><br>
                <em>ü§ù Denken Sie daran: Widerstand ist Information, nicht Opposition.</em>`
            };
        }
        
        // Standard-Beratung
        return {
            category: 'BERATUNG',
            content: `<strong>üí° Coach-Beratung f√ºr Ihre Situation:</strong><br><br>
            Basierend auf Ihrer Beschreibung und dem Kontext "${phase}" mit "${coacheeType}" empfehle ich:<br><br>
            <strong>Sofortige Schritte:</strong><br>
            1. Situation mit dem Coachee spiegeln und validieren<br>
            2. Gemeinsam den n√§chsten Fokus kl√§ren<br>
            3. Passende Intervention aus dem Prompt-Repository w√§hlen<br><br>
            <strong>Haltung:</strong><br>
            ‚Ä¢ Ressourcenorientiert bleiben<br>
            ‚Ä¢ Prozess vor Inhalt<br>
            ‚Ä¢ Coachee als Experte f√ºr sein Leben w√ºrdigen<br><br>
            <em>üéØ Vertrauen Sie Ihrer Coaching-Kompetenz und dem Prozess.</em>`
        };
    },

    getNextStepRecommendation(phase) {
        const steps = {
            'Phase 1: Problem & Ziel': 'GT1-GT4 f√ºr strukturierte Problemerfassung',
            'Phase 2: Analyse': 'GT5-GT7 f√ºr Tiefenanalyse und Musterkennung',
            'Phase 3: L√∂sung': 'GT8-GT11 f√ºr Zielentwicklung und Ressourcenaktivierung',
            'Phase 4: Umsetzung': 'GT12 f√ºr konkrete Handlungsplanung',
            'Meta: Prozessreflexion': 'META1-META3 f√ºr Prozessreflexion'
        };
        return steps[phase] || 'Situationsgerechte Prompt-Auswahl';
    },

    getMethodRecommendation(phase, coacheeType) {
        if (phase.includes('Phase 1')) return 'GT1-GT4 oder SF1 f√ºr Problemkl√§rung';
        if (phase.includes('Phase 2')) return 'DIAG1-DIAG5 f√ºr Tiefenanalyse';
        if (phase.includes('Phase 3')) return 'L√ñS1-L√ñS3 f√ºr L√∂sungsentwicklung';
        if (phase.includes('Phase 4')) return 'L√ñS4-L√ñS5 f√ºr Umsetzung';
        return 'META1-META3 f√ºr Prozessreflexion';
    },

    getPrimaryMethod(input, phase) {
        if (input.includes('spannungsfeld')) return 'Gei√üler GT4: Ausbalancierungsprobleme identifizieren';
        if (input.includes('team') || input.includes('gruppe')) return 'GRUPPE1: Team-Check mit strukturiertem Feedback';
        if (input.includes('vision') || input.includes('ziel')) return 'L√ñS1: Erfolgsimagination entwickeln';
        return 'SF1: Solution Finder f√ºr grundlegende Klarheit';
    },

    getConcreteApplication(input, coacheeType) {
        return `Beginnen Sie mit einer offenen Frage, nutzen Sie aktives Zuh√∂ren und spiegeln Sie das Geh√∂rte. Bei ${coacheeType} besonders auf systemische Aspekte achten.`;
    },

    displayResponse(response) {
        const responseDiv = DOM.find('#coachKIResponse');
        const contentDiv = DOM.find('#coachKIResponseContent');
        const categorySpan = DOM.find('#responseCategory');
        const followUp = DOM.find('#followUpActions');
        
        if (responseDiv && contentDiv && categorySpan && followUp) {
            responseDiv.style.display = 'block';
            contentDiv.innerHTML = response.content;
            categorySpan.textContent = response.category;
            followUp.style.display = 'block';
            
            Utils.animateElement(responseDiv, 'fade-in');
            
            // OpenAI Button hinzuf√ºgen wenn noch nicht da
            setTimeout(addOpenAICoachButton, 500);
        }
    }
};

// OpenAI Coach Button hinzuf√ºgen
function addOpenAICoachButton() {
    const actionButtons = DOM.find('.action-buttons');
    if (actionButtons && !DOM.find('#openai-coach-btn')) {
        const openaiCoachBtn = DOM.create('button', {
            id: 'openai-coach-btn',
            className: 'ask-ki-btn',
            innerHTML: 'üöÄ OpenAI Coach-KI',
            style: 'background: linear-gradient(135deg, #10b981, #059669); margin-left: 10px;'
        });
        
        DOM.on(openaiCoachBtn, 'click', askOpenAICoach);
        actionButtons.appendChild(openaiCoachBtn);
    }
}

// Follow-up Aktionen
window.implementSuggestion = function() {
    Utils.showToast('Empfehlung wird in den Prompt-Editor √ºbernommen.', 'info');
};

window.getAlternativeAdvice = function() {
    askCoachKI(); // Neue Antwort generieren
};

window.deepDive = function() {
    const currentInput = DOM.find('#coachInput')?.value || '';
    const input = DOM.find('#coachInput');
    if (input) {
        input.value = currentInput + '\n\nBitte gehe tiefer ins Detail und erkl√§re die Hintergr√ºnde.';
        askCoachKI();
    }
};

// Initialisierung
document.addEventListener('DOMContentLoaded', function() {
    if (window.location.pathname.includes('index.html') || window.location.pathname === '/') {
        CoachInterface.init();
        CoachInterface.setupCoachKI();
        
        // OpenAI Coach Button nach kurzer Verz√∂gerung hinzuf√ºgen
        setTimeout(addOpenAICoachButton, 2000);
        
        console.log('üéØ Coach Interface bereit');
        console.log('üöÄ OpenAI Assistant Integration aktiv');
    }
});

// Globale Load-Funktionen f√ºr HTML onclick events
window.loadProcessSupport = function() {
    CoachInterface.loadProcessSupport();
};

window.loadMethodenBeratung = function() {
    CoachInterface.loadMethodenBeratung();
};

window.loadInterventionshilfe = function() {
    CoachInterface.loadInterventionshilfe();
};

window.loadNotfallSupport = function() {
    CoachInterface.loadNotfallSupport();
};

// Debug-Funktion f√ºr OpenAI Integration
window.debugOpenAI = function() {
    console.log('=== OPENAI INTEGRATION DEBUG ===');
    console.log('Current Thread ID:', currentThreadId);
    console.log('AI Processing:', aiProcessing);
    console.log('API Endpoint Available:', '/api/openai-assistant');
    
    // Test API Verf√ºgbarkeit
    fetch('/api/openai-assistant', { method: 'HEAD' })
        .then(r => console.log('API Status:', r.status))
        .catch(e => console.log('API Error:', e.message));
};
// Voice-to-Text Zusammenfassung Feature - Patch f√ºr coach.js

// Speech Recognition Setup
let speechRecognition = null;
let isRecording = false;
let recordingStartTime = null;

// Initialize Speech Recognition
function initSpeechRecognition() {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        speechRecognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
        speechRecognition.continuous = true;
        speechRecognition.interimResults = true;
        speechRecognition.lang = 'de-DE';
        
        console.log('üé§ Speech Recognition initialisiert');
        return true;
    } else {
        console.log('‚ùå Speech Recognition nicht verf√ºgbar');
        return false;
    }
}

// Voice Summary Interface hinzuf√ºgen
function addVoiceSummaryInterface() {
    const coachKIResponse = DOM.find('#coachKIResponse');
    if (!coachKIResponse || DOM.find('#voiceSummarySection')) return;

    const voiceSummaryHTML = `
        <div id="voiceSummarySection" style="margin-top: 20px; padding: 20px; background: rgba(16, 185, 129, 0.1); border-radius: 12px; border: 2px solid rgba(16, 185, 129, 0.3);">
            <h4 style="color: #065f46; margin-bottom: 15px; display: flex; align-items: center;">
                üé§ M√ºndliche Zusammenfassung f√ºr Coachee
            </h4>
            
            <div style="display: flex; gap: 10px; margin-bottom: 15px; align-items: center;">
                <button id="startRecordingBtn" onclick="startVoiceRecording()" class="voice-btn" style="background: #10b981; color: white; border: none; padding: 12px 20px; border-radius: 8px; font-weight: 600; cursor: pointer;">
                    üé§ Aufnahme starten
                </button>
                <button id="stopRecordingBtn" onclick="stopVoiceRecording()" class="voice-btn" style="background: #ef4444; color: white; border: none; padding: 12px 20px; border-radius: 8px; font-weight: 600; cursor: pointer; display: none;">
                    ‚èπÔ∏è Aufnahme stoppen
                </button>
                <span id="recordingStatus" style="color: #065f46; font-weight: 600;"></span>
            </div>
            
            <div id="transcriptionContainer" style="background: white; border: 2px solid rgba(16, 185, 129, 0.3); border-radius: 8px; padding: 15px; min-height: 100px; margin-bottom: 15px; display: none;">
                <div style="color: #065f46; font-weight: 600; margin-bottom: 10px;">Transkription:</div>
                <div id="transcriptionText" style="line-height: 1.6; color: #374151;"></div>
            </div>
            
            <div id="summaryActions" style="display: none; gap: 10px;">
                <button onclick="editSummary()" style="background: #6b7280; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer;">
                    ‚úèÔ∏è Bearbeiten
                </button>
                <button onclick="sendSummaryToCoachee()" style="background: #10b981; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-weight: 600;">
                    üì§ An Coachee senden
                </button>
                <button onclick="clearSummary()" style="background: #ef4444; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer;">
                    üóëÔ∏è L√∂schen
                </button>
            </div>
        </div>
    `;
    
    coachKIResponse.insertAdjacentHTML('beforeend', voiceSummaryHTML);
}

// Aufnahme starten
window.startVoiceRecording = function() {
    if (!speechRecognition) {
        if (!initSpeechRecognition()) {
            Utils.showToast('Speech Recognition nicht verf√ºgbar. Browser unterst√ºtzt diese Funktion nicht.', 'error');
            return;
        }
    }

    isRecording = true;
    recordingStartTime = Date.now();
    
    // UI Updates
    DOM.find('#startRecordingBtn').style.display = 'none';
    DOM.find('#stopRecordingBtn').style.display = 'inline-block';
    DOM.find('#recordingStatus').textContent = 'Aufnahme l√§uft... üî¥';
    DOM.find('#transcriptionContainer').style.display = 'block';
    DOM.find('#transcriptionText').textContent = 'Sprechen Sie jetzt...';

    // Recording Timer
    const timer = setInterval(() => {
        if (!isRecording) {
            clearInterval(timer);
            return;
        }
        const elapsed = Math.floor((Date.now() - recordingStartTime) / 1000);
        DOM.find('#recordingStatus').textContent = `Aufnahme l√§uft... üî¥ ${elapsed}s`;
    }, 1000);

    // Speech Recognition Events
    speechRecognition.onresult = function(event) {
        let finalTranscript = '';
        let interimTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript;
            if (event.results[i].isFinal) {
                finalTranscript += transcript + ' ';
            } else {
                interimTranscript += transcript;
            }
        }

        const transcriptionEl = DOM.find('#transcriptionText');
        if (transcriptionEl) {
            const currentFinal = transcriptionEl.getAttribute('data-final') || '';
            transcriptionEl.setAttribute('data-final', currentFinal + finalTranscript);
            transcriptionEl.innerHTML = 
                `<span style="color: #374151;">${currentFinal + finalTranscript}</span>` +
                `<span style="color: #9ca3af; font-style: italic;">${interimTranscript}</span>`;
        }
    };

    speechRecognition.onerror = function(event) {
        console.error('Speech Recognition Error:', event.error);
        Utils.showToast(`Spracherkennung Fehler: ${event.error}`, 'error');
        stopVoiceRecording();
    };

    speechRecognition.onend = function() {
        if (isRecording) {
            // Automatisch neu starten wenn noch aufgenommen wird
            speechRecognition.start();
        }
    };

    speechRecognition.start();
    Utils.showToast('Sprachaufnahme gestartet', 'success');
    console.log('üé§ Sprachaufnahme gestartet');
};

// Aufnahme stoppen
window.stopVoiceRecording = function() {
    if (!speechRecognition || !isRecording) return;

    isRecording = false;
    speechRecognition.stop();

    // UI Updates
    DOM.find('#startRecordingBtn').style.display = 'inline-block';
    DOM.find('#stopRecordingBtn').style.display = 'none';
    DOM.find('#recordingStatus').textContent = 'Aufnahme beendet ‚úÖ';
    DOM.find('#summaryActions').style.display = 'flex';

    const duration = Math.floor((Date.now() - recordingStartTime) / 1000);
    Utils.showToast(`Sprachaufnahme beendet (${duration}s)`, 'success');
    
    // Finale Transkription aufr√§umen
    const transcriptionEl = DOM.find('#transcriptionText');
    if (transcriptionEl) {
        const finalText = transcriptionEl.getAttribute('data-final') || transcriptionEl.textContent;
        transcriptionEl.innerHTML = `<span style="color: #374151;">${finalText.trim()}</span>`;
    }
    
    console.log('‚èπÔ∏è Sprachaufnahme beendet');
};

// Zusammenfassung bearbeiten
window.editSummary = function() {
    const transcriptionEl = DOM.find('#transcriptionText');
    if (!transcriptionEl) return;

    const currentText = transcriptionEl.textContent || '';
    const textarea = DOM.create('textarea', {
        style: 'width: 100%; min-height: 100px; padding: 10px; border: 2px solid #10b981; border-radius: 6px; font-family: inherit;',
        value: currentText
    });

    transcriptionEl.parentNode.replaceChild(textarea, transcriptionEl);
    textarea.focus();

    // Save/Cancel Buttons
    const actions = DOM.find('#summaryActions');
    actions.innerHTML = `
        <button onclick="saveSummaryEdit()" style="background: #10b981; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-weight: 600;">
            üíæ Speichern
        </button>
        <button onclick="cancelSummaryEdit()" style="background: #6b7280; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer;">
            ‚ùå Abbrechen
        </button>
    `;
};

// Bearbeitung speichern
window.saveSummaryEdit = function() {
    const textarea = DOM.find('#transcriptionContainer textarea');
    if (!textarea) return;

    const newText = textarea.value.trim();
    const newDiv = DOM.create('div', {
        id: 'transcriptionText',
        style: 'line-height: 1.6; color: #374151;',
        innerHTML: `<span style="color: #374151;">${Utils.escapeHtml(newText)}</span>`
    });

    textarea.parentNode.replaceChild(newDiv, textarea);

    // Restore Actions
    const actions = DOM.find('#summaryActions');
    actions.innerHTML = `
        <button onclick="editSummary()" style="background: #6b7280; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer;">
            ‚úèÔ∏è Bearbeiten
        </button>
        <button onclick="sendSummaryToCoachee()" style="background: #10b981; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-weight: 600;">
            üì§ An Coachee senden
        </button>
        <button onclick="clearSummary()" style="background: #ef4444; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer;">
            üóëÔ∏è L√∂schen
        </button>
    `;

    Utils.showToast('Zusammenfassung gespeichert', 'success');
};

// Bearbeitung abbrechen
window.cancelSummaryEdit = function() {
    // Reload the interface
    location.reload();
};

// Zusammenfassung an Coachee senden
window.sendSummaryToCoachee = function() {
    const transcriptionEl = DOM.find('#transcriptionText');
    if (!transcriptionEl) return;

    const summaryText = transcriptionEl.textContent.trim();
    if (!summaryText) {
        Utils.showToast('Keine Zusammenfassung vorhanden.', 'error');
        return;
    }

    if (!window.coachingComm) {
        Utils.showToast('Kommunikation nicht verf√ºgbar.', 'error');
        return;
    }

    // Formatierte Zusammenfassung mit Header
    const formattedSummary = `üìã Coach-Zusammenfassung:\n\n${summaryText}`;
    
    // An Coachee senden
    window.coachingComm.addMessage('üë®‚Äçüíº Coach', formattedSummary);
    
    // Zur Kollaborations-Tab wechseln
    CoachInterface.showTab('collaboration');
    
    Utils.showToast('Zusammenfassung an Coachee gesendet!', 'success');
    console.log('üì§ M√ºndliche Zusammenfassung gesendet:', summaryText);

    // Cleanup
    clearSummary();
};

// Zusammenfassung l√∂schen
window.clearSummary = function() {
    const voiceSection = DOM.find('#voiceSummarySection');
    if (voiceSection) {
        voiceSection.remove();
    }
    
    // Stop recording if active
    if (isRecording) {
        stopVoiceRecording();
    }
};

// KI-Antworten nur f√ºr Coach sichtbar machen
function hideAIResponsesFromCoachee() {
    // Collaboration Display anpassen
    const originalUpdateDisplay = CoachInterface.updateCollaborationDisplay;
    
    CoachInterface.updateCollaborationDisplay = function(messages) {
        // Filter AI messages f√ºr Coachee-View
        const isCoacheeView = window.location.pathname.includes('collaboration');
        const filteredMessages = isCoacheeView ? 
            messages.filter(msg => !msg.sender.includes('KI') && !msg.sender.includes('OpenAI')) : 
            messages;
        
        return originalUpdateDisplay.call(this, filteredMessages);
    };
}

// Coach-KI Response Display erweitern
const originalDisplayResponse = CoachKI.displayResponse;
CoachKI.displayResponse = function(response) {
    // Original Response anzeigen
    originalDisplayResponse.call(this, response);
    
    // Voice Summary Interface hinzuf√ºgen
    setTimeout(() => {
        addVoiceSummaryInterface();
    }, 100);
};

// Initialize Voice Features
document.addEventListener('DOMContentLoaded', function() {
    // Speech Recognition pr√ºfen und initialisieren
    if (initSpeechRecognition()) {
        console.log('üé§ Voice Summary Feature verf√ºgbar');
    } else {
        console.log('‚ùå Voice Summary Feature nicht verf√ºgbar (Browser-Support fehlt)');
    }
    
    // Hide AI responses from Coachee view
    hideAIResponsesFromCoachee();
});

// Quick-Access Button f√ºr Voice Summary
function addVoiceSummaryButton() {
    const quickAccess = DOM.find('.quick-access');
    if (quickAccess && !DOM.find('#voiceSummaryQuickBtn')) {
        const voiceBtn = DOM.create('button', {
            id: 'voiceSummaryQuickBtn',
            className: 'quick-btn',
            innerHTML: 'üé§ Voice Summary',
            style: 'background: #10b981; color: white;'
        });
        
        DOM.on(voiceBtn, 'click', () => {
            // Direkt zur Coach-KI Tab und Voice Interface
            CoachInterface.showTab('coachki');
            setTimeout(() => {
                const input = DOM.find('#coachInput');
                if (input) {
                    input.value = 'Ich m√∂chte eine m√ºndliche Zusammenfassung f√ºr meinen Coachee erstellen.';
                    askCoachKI();
                }
            }, 300);
        });
        
        quickAccess.appendChild(voiceBtn);
    }
}

// Voice Summary Button nach Initialisierung hinzuf√ºgen
setTimeout(addVoiceSummaryButton, 3000);

console.log('üé§ Voice-to-Text Zusammenfassung Feature geladen');
console.log('üí° Nutze Coach-KI Tab f√ºr m√ºndliche Zusammenfassungen');
// Fix: KI-Antworten NUR f√ºr Coach sichtbar machen

// Original sendDialogToAI und sendDialogToOpenAI Funktionen anpassen
// Ersetze die bestehenden Funktionen mit diesen:

window.sendDialogToAI = function() {
    const messages = window.coachingComm?.getMessages() || [];
    
    if (messages.length === 0) {
        Utils.showToast('Keine Nachrichten zum Senden vorhanden.', 'error');
        return;
    }
    
    // Dialog zu KI-readable Format konvertieren
    const dialog = messages.map(msg => `${msg.sender}: ${msg.content}`).join('\n\n');
    
    // Intelligente KI-Antwort basierend auf Dialog generieren
    const aiResponse = generateAIResponse(dialog, messages);
    
    // KI-Antwort NICHT an Coachee senden - nur f√ºr Coach anzeigen
    displayAIResponseForCoachOnly('ü§ñ Lokale KI', aiResponse);
    
    Utils.showToast('Lokale KI-Analyse erstellt (nur f√ºr Coach sichtbar)', 'success');
    console.log('ü§ñ Lokale KI-Antwort nur f√ºr Coach generiert');
};

window.sendDialogToOpenAI = async function() {
    const messages = window.coachingComm?.getMessages() || [];
    
    if (messages.length === 0) {
        Utils.showToast('Keine Nachrichten zum Senden vorhanden.', 'error');
        return;
    }

    // Button-Status √§ndern
    const button = document.querySelector('[onclick="sendDialogToOpenAI()"]');
    if (button) {
        button.textContent = 'üöÄ OpenAI denkt...';
        button.disabled = true;
    }

    try {
        // Dialog zu strukturiertem Format konvertieren
        const dialog = messages.map(msg => `${msg.sender}: ${msg.content}`).join('\n\n');
        
        // Kontext f√ºr bessere KI-Antworten
        const context = {
            clientName: window.coachingApp.selectedClient?.name || 'Unbekannt',
            clientTopics: window.coachingApp.selectedClient?.topics || [],
            sessionPhase: 'Dialog-Analyse',
            messageCount: messages.length,
            lastSender: messages[messages.length - 1]?.sender
        };

        // OpenAI Assistant aufrufen
        const aiResponse = await generateOpenAIResponse(dialog, context);
        
        if (aiResponse) {
            // KI-Antwort NICHT an Coachee senden - nur f√ºr Coach anzeigen
            displayAIResponseForCoachOnly('üöÄ OpenAI Coach', aiResponse);
            Utils.showToast('OpenAI Analyse erstellt (nur f√ºr Coach sichtbar)', 'success');
        }

    } catch (error) {
        console.error('Error sending to OpenAI:', error);
        Utils.showToast('Fehler beim Senden an OpenAI.', 'error');
        
    } finally {
        // Button zur√ºcksetzen
        if (button) {
            button.textContent = 'üöÄ Dialog an OpenAI';
            button.disabled = false;
        }
    }
};

// Neue Funktion: KI-Antwort nur f√ºr Coach anzeigen
function displayAIResponseForCoachOnly(sender, response) {
    // Spezielle KI-Antwort Box im Kollaborations-Monitor hinzuf√ºgen
    const collaborationMessages = DOM.find('#collaborationMessages');
    if (!collaborationMessages) return;

    // Pr√ºfen ob bereits eine KI-Antwort Box existiert
    let aiResponseBox = DOM.find('#coachOnlyAIResponse');
    
    if (!aiResponseBox) {
        // Neue KI-Antwort Box erstellen
        aiResponseBox = DOM.create('div', {
            id: 'coachOnlyAIResponse',
            style: `
                background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(5, 150, 105, 0.05));
                border: 3px solid #10b981;
                border-radius: 15px;
                padding: 20px;
                margin: 20px 0;
                box-shadow: 0 8px 25px rgba(16, 185, 129, 0.2);
            `,
            innerHTML: `
                <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 15px;">
                    <h4 style="color: #065f46; margin: 0; font-weight: 700;">
                        ü§ñ KI-Analyse (nur f√ºr Coach)
                    </h4>
                    <button onclick="closeCoachAIResponse()" style="background: #ef4444; color: white; border: none; border-radius: 50%; width: 30px; height: 30px; cursor: pointer; font-size: 16px;">
                        ‚úï
                    </button>
                </div>
                <div id="coachAIContent" style="background: white; padding: 15px; border-radius: 10px; border: 2px solid rgba(16, 185, 129, 0.3); line-height: 1.6; color: #374151;">
                    <!-- KI-Antwort wird hier eingef√ºgt -->
                </div>
                <div style="margin-top: 15px; display: flex; gap: 10px;">
                    <button onclick="createVoiceSummaryFromAI()" style="background: #10b981; color: white; border: none; padding: 10px 15px; border-radius: 8px; cursor: pointer; font-weight: 600;">
                        üé§ M√ºndliche Zusammenfassung erstellen
                    </button>
                    <button onclick="sendAIResponseToCoachee()" style="background: #6b7280; color: white; border: none; padding: 10px 15px; border-radius: 8px; cursor: pointer;">
                        üì§ Doch an Coachee senden
                    </button>
                </div>
            `
        });
        
        // Box vor den normalen Nachrichten einf√ºgen
        collaborationMessages.insertBefore(aiResponseBox, collaborationMessages.firstChild);
    }

    // KI-Antwort einf√ºgen
    const contentDiv = DOM.find('#coachAIContent');
    if (contentDiv) {
        contentDiv.innerHTML = `
            <div style="font-weight: 600; color: #065f46; margin-bottom: 10px;">${sender}</div>
            <div>${Utils.escapeHtml(response)}</div>
        `;
    }

    // Scroll to top um die KI-Antwort zu zeigen
    collaborationMessages.scrollTop = 0;
}

// KI-Antwort Box schlie√üen
window.closeCoachAIResponse = function() {
    const aiBox = DOM.find('#coachOnlyAIResponse');
    if (aiBox) {
        aiBox.remove();
    }
};

// Voice Summary direkt aus KI-Antwort erstellen
window.createVoiceSummaryFromAI = function() {
    // Zur Coach-KI Tab wechseln
    CoachInterface.showTab('coachki');
    
    // KI-Antwort in Coach Input einf√ºgen
    const aiContent = DOM.find('#coachAIContent div:last-child')?.textContent || '';
    const coachInput = DOM.find('#coachInput');
    
    if (coachInput && aiContent) {
        coachInput.value = `Basierend auf dieser KI-Analyse m√∂chte ich eine Zusammenfassung f√ºr meinen Coachee erstellen:\n\n${aiContent}`;
        
        // Automatisch lokale Coach-KI aufrufen
        setTimeout(() => {
            askCoachKI();
        }, 500);
    }
    
    Utils.showToast('Voice Summary Modus aktiviert - siehe Coach-KI Tab', 'info');
};

// KI-Antwort doch an Coachee senden (falls gew√ºnscht)
window.sendAIResponseToCoachee = function() {
    const aiContent = DOM.find('#coachAIContent div:last-child')?.textContent || '';
    
    if (!aiContent) {
        Utils.showToast('Keine KI-Antwort vorhanden.', 'error');
        return;
    }
    
    if (!window.coachingComm) {
        Utils.showToast('Kommunikation nicht verf√ºgbar.', 'error');
        return;
    }
    
    // Best√§tigungsdialog
    if (confirm('M√∂chten Sie die KI-Antwort wirklich an den Coachee senden?')) {
        window.coachingComm.addMessage('ü§ñ Coach-KI', aiContent);
        closeCoachAIResponse();
        Utils.showToast('KI-Antwort an Coachee gesendet', 'success');
    }
};

// Kollaborations-Actions anpassen
CoachInterface.showCollaborationActions = function() {
    const actions = DOM.find('#collaborationActions');
    if (actions) {
        actions.style.display = 'flex';
        actions.innerHTML = `
            <button onclick="sendDialogToAI()" class="send-ai-btn">
                ü§ñ Lokale KI-Analyse (Coach only)
            </button>
            <button onclick="sendDialogToOpenAI()" class="send-ai-btn" style="background: linear-gradient(135deg, #10b981, #059669);">
                üöÄ OpenAI Analyse (Coach only)
            </button>
            <button onclick="openCollaborationWindow()" class="open-collab-btn">
                üîó Kollaborations-Fenster √∂ffnen
            </button>
            <button onclick="editPrompt()" class="edit-btn">
                ‚úèÔ∏è Zur√ºck zum Editor
            </button>
        `;
    }
};

console.log('‚úÖ KI-Antworten sind jetzt nur f√ºr Coach sichtbar');
console.log('üé§ Voice Summary Integration aktiv');