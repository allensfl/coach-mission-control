/* ===== COACH.JS - Coach Interface Logik ===== */

// Coach-spezifische Funktionen
const CoachInterface = {
    init() {
        this.setupTabs();
        this.renderClients();
        this.renderPrompts();
        this.updatePromptStats();
        this.setupCategoryFilter();
        this.setupCollaborationMonitor();
        
        console.log('üéØ Coach Interface initialisiert');
    },

    // Tab-Navigation
    setupTabs() {
        DOM.findAll('.tab-btn').forEach(btn => {
            DOM.on(btn, 'click', () => {
                const targetTab = btn.getAttribute('data-tab');
                this.showTab(targetTab);
            });
        });
    },

    showTab(tabName) {
        // Alle Tabs deaktivieren
        DOM.findAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        DOM.findAll('.tab-content').forEach(content => content.classList.remove('active'));
        
        // Gew√§hlten Tab aktivieren
        const tabBtn = DOM.find(`[data-tab="${tabName}"]`);
        const tabContent = DOM.find(`#${tabName}Tab`);
        
        if (tabBtn && tabContent) {
            tabBtn.classList.add('active');
            tabContent.classList.add('active');
        }
    },

    // Klienten-Management
    renderClients() {
        const container = DOM.find('#clientsContainer');
        if (!container || !window.clients) return;

        DOM.empty(container);
        
        window.clients.forEach(client => {
            const clientCard = DOM.create('div', {
                className: 'client-card',
                'data-client-id': client.id,
                innerHTML: `
                    <div style="font-size: 1.3rem; font-weight: 700; color: #1e293b; margin-bottom: 8px;">
                        ${client.name}
                    </div>
                    <div style="color: #64748b; margin-bottom: 12px;">
                        <span style="font-weight: 600; color: #3b82f6;">${client.age} Jahre</span> ‚Ä¢ ${client.profession}
                    </div>
                    <div style="display: flex; flex-wrap: wrap; gap: 6px;">
                        ${client.topics.map(topic => 
                            `<span style="background: rgba(59,130,246,0.1); color: #3b82f6; padding: 4px 10px; border-radius: 20px; font-size: 0.8rem;">${topic}</span>`
                        ).join('')}
                    </div>
                `
            });

            DOM.on(clientCard, 'click', () => this.selectClient(client.id));
            container.appendChild(clientCard);
        });
    },

    selectClient(clientId) {
        const client = window.clients.find(c => c.id === clientId);
        if (!client) return;

        window.coachingApp.selectedClient = client;
        
        // Visual feedback
        DOM.findAll('.client-card').forEach(card => {
            card.classList.remove('selected');
        });
        DOM.find(`[data-client-id="${clientId}"]`).classList.add('selected');
        
        // Session-Button anzeigen
        const startBtn = DOM.find('#startSessionBtn');
        if (startBtn) {
            startBtn.style.display = 'block';
            Utils.animateElement(startBtn, 'fade-in');
        }
        
        Utils.showToast(`Klient ausgew√§hlt: ${client.name}`, 'success');
        console.log('‚úÖ Klient ausgew√§hlt:', client.name);
    },

    // Prompt-Management
    renderPrompts() {
        const container = DOM.find('#promptsContainer');
        const categoryFilter = DOM.find('#categoryFilter').value || '';
        
        if (!container || !window.prompts) return;

        const filteredPrompts = Object.entries(window.prompts).filter(([key, prompt]) => {
            return !categoryFilter || prompt.category === categoryFilter;
        });

        DOM.empty(container);
        
        filteredPrompts.forEach(([key, prompt]) => {
            const promptCard = DOM.create('div', {
                className: 'prompt-card',
                innerHTML: `
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                        <strong style="color: #3b82f6; font-size: 1.1rem;">${key}</strong>
                        <span class="category-tag">${prompt.category}</span>
                    </div>
                    <div style="font-weight: 600; color: #374151; margin-bottom: 8px;">
                        ${prompt.description}
                    </div>
                    <div style="font-size: 0.9rem; color: #64748b; line-height: 1.4;">
                        ${Utils.truncateText(prompt.text, 100)}
                    </div>
                `
            });

            DOM.on(promptCard, 'click', () => this.usePrompt(key));
            container.appendChild(promptCard);
        });

        this.updatePromptStats();
    },

    usePrompt(promptKey) {
        const prompt = window.prompts[promptKey];
        if (!prompt) return;

        window.coachingApp.currentPrompt = prompt;
        const editor = DOM.find('#promptEditor');
        
        if (editor) {
            editor.value = `${promptKey}: ${prompt.description}\n\n${prompt.text}`;
            Utils.animateElement(editor, 'fade-in');
        }
        
        Utils.showToast(`Prompt geladen: ${promptKey}`, 'success');
        console.log('‚úÖ Prompt geladen:', promptKey);
    },

    updatePromptStats() {
        const statsElement = DOM.find('#promptStats');
        if (!statsElement || !window.prompts) return;

        const totalPrompts = Object.keys(window.prompts).length;
        const categories = [...new Set(Object.values(window.prompts).map(p => p.category))];
        
        statsElement.innerHTML = `
            <strong>Prompts verf√ºgbar: ${totalPrompts}</strong><br>
            <span style="font-size: 0.9rem; color: #64748b;">
                Kategorien: ${categories.join(', ')} | 
                GT: ${Object.values(window.prompts).filter(p => p.category === 'GT').length} | 
                SF: ${Object.values(window.prompts).filter(p => p.category === 'SF').length} | 
                DIAG: ${Object.values(window.prompts).filter(p => p.category === 'DIAG').length} | 
                L√ñS: ${Object.values(window.prompts).filter(p => p.category === 'L√ñS').length}
            </span>
        `;
    },

    setupCategoryFilter() {
        const filter = DOM.find('#categoryFilter');
        if (!filter || !window.prompts) return;

        const categories = [...new Set(Object.values(window.prompts).map(p => p.category))];
        
        categories.forEach(category => {
            const option = DOM.create('option', {
                value: category,
                textContent: `${category} (${Object.values(window.prompts).filter(p => p.category === category).length})`
            });
            filter.appendChild(option);
        });
        
        DOM.on(filter, 'change', () => this.renderPrompts());
    },

    // Kollaboration
    setupCollaborationMonitor() {
        if (!window.coachingComm) return;

        // Status-Updates √ºberwachen
        window.coachingComm.onStatusChange((status) => {
            const statusElement = DOM.find('#connectionStatus');
            if (statusElement) {
                statusElement.textContent = status;
            }
        });

        // Nachrichten-Updates √ºberwachen
        window.coachingComm.onMessagesUpdate((messages) => {
            this.updateCollaborationDisplay(messages);
        });
    },

    updateCollaborationDisplay(messages) {
        const container = DOM.find('#collaborationMessages');
        if (!container) return;

        if (messages.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; color: #64748b; padding: 40px;">
                    Hier sehen Sie den Dialog zwischen Coach und Coachee.<br>
                    √ñffnen Sie das Kollaborations-Fenster f√ºr den Coachee.
                </div>
            `;
            
            // Actions ausblenden wenn keine Nachrichten
            const actions = DOM.find('#collaborationActions');
            if (actions) {
                actions.style.display = 'none';
            }
            return;
        }

        DOM.empty(container);
        
        messages.forEach(message => {
            const messageDiv = DOM.create('div', {
                className: `message ${message.sender.toLowerCase().replace(/[^a-z]/g, '')}`,
                innerHTML: `
                    <div style="display: flex; justify-content: space-between; margin-bottom: 12px;">
                        <span style="font-weight: bold; color: #3b82f6;">${this.getSenderDisplay(message.sender)}</span>
                        <span style="color: #64748b; font-size: 0.9rem;">${Utils.formatTime(message.timestamp)}</span>
                    </div>
                    <div style="line-height: 1.6;">${Utils.escapeHtml(message.content)}</div>
                `
            });
            container.appendChild(messageDiv);
        });

        MessageHelpers.scrollToBottom(container);
        
        // Actions anzeigen wenn Nachrichten vorhanden
        this.showCollaborationActions();
    },

    getSenderDisplay(sender) {
        const mapping = {
            'coach': 'üë®‚Äçüíº Coach',
            'coachee': 'üë§ Coachee', 
            'system': 'üéØ System',
            'kicoach': 'ü§ñ KI-Coach',
            'ki-coach': 'ü§ñ KI-Coach'
        };
        
        const key = sender.toLowerCase().replace(/[^a-z]/g, '');
        return mapping[key] || sender;
    },

    showCollaborationActions() {
        const actions = DOM.find('#collaborationActions');
        if (actions) {
            actions.style.display = 'flex';
            actions.innerHTML = `
                <button onclick="sendDialogToAI()" class="send-ai-btn">
                    ü§ñ Dialog an KI senden
                </button>
                <button onclick="openCollaborationWindow()" class="open-collab-btn">
                    üîó Kollaborations-Fenster √∂ffnen
                </button>
                <button onclick="editPrompt()" class="edit-btn">
                    ‚úèÔ∏è Zur√ºck zum Editor
                </button>
            `;
        }
    },

    // Coach-KI
    setupCoachKI() {
        // Schnellzugriff-Buttons
        const processBtn = DOM.find('[onclick="loadProcessSupport()"]');
        const methodsBtn = DOM.find('[onclick="loadMethodenBeratung()"]');
        const interventionBtn = DOM.find('[onclick="loadInterventionshilfe()"]');
        const emergencyBtn = DOM.find('[onclick="loadNotfallSupport()"]');

        if (processBtn) DOM.on(processBtn, 'click', () => this.loadProcessSupport());
        if (methodsBtn) DOM.on(methodsBtn, 'click', () => this.loadMethodenBeratung());
        if (interventionBtn) DOM.on(interventionBtn, 'click', () => this.loadInterventionshilfe());
        if (emergencyBtn) DOM.on(emergencyBtn, 'click', () => this.loadNotfallSupport());
    },

    // Coach-KI Load-Funktionen korrigiert
    loadProcessSupport() {
        const input = DOM.find('#coachInput');
        const phase = DOM.find('#sessionPhase');
        
        if (input) input.value = 'Ich brauche Unterst√ºtzung bei der Prozesssteuerung. Wo stehen wir gerade und was ist der beste n√§chste Schritt?';
        if (phase) phase.value = 'Meta: Prozessreflexion';
        
        console.log('üîß Prozess-Support geladen');
    },

    loadMethodenBeratung() {
        const input = DOM.find('#coachInput');
        if (input) input.value = 'Welche Coaching-Methode oder Intervention w√§re jetzt am passendsten f√ºr meinen Coachee?';
        
        console.log('üõ†Ô∏è Methoden-Beratung geladen');
    },

    loadInterventionshilfe() {
        const input = DOM.find('#coachInput');
        if (input) input.value = 'Mein Coachee zeigt [Verhalten/Reaktion]. Wie gehe ich damit professionell um?';
        
        console.log('üéØ Interventionshilfe geladen');
    },

    loadNotfallSupport() {
        const input = DOM.find('#coachInput');
        const urgency = DOM.find('#urgency');
        
        if (input) input.value = 'NOTFALL: Ich erkenne Warnsignale bei meinem Coachee und brauche sofortige Handlungsempfehlungen.';
        if (urgency) urgency.value = 'Notfall';
        
        console.log('üö® Notfall-Support geladen');
    }
};

// Globale Funktionen f√ºr HTML-Aufrufe
window.startSession = function() {
    if (!window.coachingApp.selectedClient) {
        Utils.showToast('Bitte w√§hlen Sie zuerst einen Klienten aus.', 'error');
        return;
    }
    
    // Messages bei neuer Session leeren
    if (window.coachingComm) {
        window.coachingComm.clearMessages();
        console.log('üóëÔ∏è Messages f√ºr neue Session geleert');
    }
    
    CoachInterface.showTab('coaching');
    SessionTimer.start();
    
    if (window.coachingComm) {
        window.coachingComm.addMessage('System', `Session gestartet f√ºr ${window.coachingApp.selectedClient.name}`, 'system');
    }
    
    Utils.showToast(`Session gestartet f√ºr ${window.coachingApp.selectedClient.name}`, 'success');
    console.log('üöÄ Session gestartet f√ºr:', window.coachingApp.selectedClient.name);
};

window.sendToCollaboration = function() {
    const editor = DOM.find('#promptEditor');
    const content = editor?.value?.trim();
    
    if (!content) {
        Utils.showToast('Bitte geben Sie einen Prompt ein.', 'error');
        return;
    }
    
    if (!window.coachingComm) {
        Utils.showToast('Kommunikation nicht verf√ºgbar.', 'error');
        return;
    }
    
    // Nachricht zur Kollaboration senden
    window.coachingComm.addMessage('Coach', content);
    
    // Zur Kollaborations-Tab wechseln
    CoachInterface.showTab('collaboration');
    
    Utils.showToast('Prompt an Coachee gesendet', 'success');
    console.log('‚úÖ Prompt an Kollaboration gesendet');
};

// "Dialog an KI senden" Funktion
window.sendDialogToAI = function() {
    const messages = window.coachingComm?.getMessages() || [];
    
    if (messages.length === 0) {
        Utils.showToast('Keine Nachrichten zum Senden vorhanden.', 'error');
        return;
    }
    
    // Dialog zu KI-readable Format konvertieren
    const dialog = messages.map(msg => `${msg.sender}: ${msg.content}`).join('\n\n');
    
    // Intelligente KI-Antwort basierend auf Dialog generieren
    const aiResponse = generateAIResponse(dialog, messages);
    
    // KI-Antwort zur Kollaboration hinzuf√ºgen
    window.coachingComm.addMessage('KI-Coach', aiResponse);
    
    Utils.showToast('Dialog an KI gesendet - Antwort erhalten!', 'success');
    console.log('ü§ñ KI-Antwort generiert f√ºr Dialog');
};

// "An KI senden" Funktion - schickt den kompletten Dialog an die KI
window.sendToAI = function() {
    // Umleitung zur neuen Funktion
    sendDialogToAI();
};

// KI-Antwort basierend auf Dialogverlauf generieren
function generateAIResponse(dialog, messages) {
    const lastMessage = messages[messages.length - 1];
    const dialogLower = dialog.toLowerCase();
    
    // Analyse des Dialogs
    if (dialogLower.includes('gt1') || dialogLower.includes('anliegen')) {
        return `Vielen Dank f√ºr das Vertrauen, dass Sie Ihr Anliegen mit mir teilen. Was Sie beschreiben, zeigt wichtige Reflexions- und Entwicklungsbereitschaft. 

Ich h√∂re heraus, dass Sie bereit sind, strukturiert an diesem Thema zu arbeiten. Das ist bereits eine wertvolle Ressource.

Zur Vertiefung: Wenn Sie Ihre Situation in einem Bild beschreiben m√ºssten - welches Bild w√ºrden Sie w√§hlen? Was w√ºrde dieses Bild √ºber Ihr Anliegen aussagen?`;
    }
    
    if (dialogLower.includes('wunderfrage') || dialogLower.includes('wunder')) {
        return `Diese Wunderfrage √∂ffnet wichtige Perspektiven! Ihre Antwort zeigt mir, dass Sie bereits eine klare Vorstellung von der gew√ºnschten Zukunft haben.

Besonders wertvoll finde ich [konkretes Detail aus der Antwort]. Das zeigt mir Ihre Klarheit √ºber das Ziel.

N√§chster Schritt: Was von dem, was Sie im "Wunder-Zustand" beschrieben haben, ist heute - auch nur in kleinen Ans√§tzen - bereits vorhanden?`;
    }
    
    if (dialogLower.includes('ressourcen') || dialogLower.includes('st√§rken')) {
        return `Ich bin beeindruckt von den Ressourcen, die Sie mitbringen! Sie untersch√§tzen vermutlich Ihre F√§higkeiten.

Besonders die [erw√§hnte St√§rke] ist eine echte Superkraft, die Ihnen in Ihrer aktuellen Situation sehr helfen kann.

Frage zur Vertiefung: Wie k√∂nnten Sie diese St√§rke noch gezielter f√ºr Ihr aktuelles Anliegen einsetzen? Was w√ºrde sich dadurch ver√§ndern?`;
    }
    
    if (dialogLower.includes('hindernis') || dialogLower.includes('widerstand')) {
        return `Danke f√ºr diese ehrliche Reflexion √ºber m√∂gliche Hindernisse. Das zeigt Ihre realistische Einsch√§tzung und Vorausplanung.

Ich sehe in dem, was Sie als "Hindernis" beschreiben, auch einen Teil von Ihnen, der Sie sch√ºtzen m√∂chte. Jeder Widerstand hat meist eine positive Absicht.

Lassen Sie uns erkunden: Wenn dieses Hindernis Ihr Freund w√§re - was w√ºrde es Ihnen Gutes tun wollen? Wovor m√∂chte es Sie bewahren?`;
    }
    
    // Standard-Antwort basierend auf letzter Nachricht
    if (lastMessage.sender === 'Coachee') {
        return `Vielen Dank f√ºr diese offene Antwort. Ich merke, wie Sie sich Gedanken machen und reflektieren - das ist ein wichtiger Teil des Coaching-Prozesses.

Was Sie beschreiben, zeigt mir Ihre Bereitschaft zur Ver√§nderung und gleichzeitig eine gesunde Vorsicht. Beides ist wertvoll.

Meine Beobachtung: Sie haben bereits mehr Klarheit √ºber Ihr Thema, als Sie vielleicht denken. 

Um den n√§chsten Schritt zu finden: Was f√ºhlt sich f√ºr Sie als der nat√ºrlichste n√§chste Schritt an?`;
    }
    
    return `Ich sch√§tze die Offenheit und Tiefe unseres Gespr√§chs. Ihre Bereitschaft zur Reflexion und Ihr Mut, sich diesen Fragen zu stellen, sind bemerkenswert.

Was ich in unserem Dialog wahrnehme: Sie sind bereits auf einem guten Weg und haben mehr Ressourcen, als Sie sich vielleicht bewusst sind.

Lassen Sie uns gemeinsam den n√§chsten Schritt erkunden. Was resoniert am st√§rksten mit Ihnen aus unserem bisherigen Gespr√§ch?`;
}

// Prompt Editor zur√ºck
window.editPrompt = function() {
    CoachInterface.showTab('coaching');
};

window.clearEditor = function() {
    const editor = DOM.find('#promptEditor');
    if (editor) {
        editor.value = '';
        Utils.showToast('Editor geleert', 'info');
    }
};

window.askCoachKI = function() {
    const input = DOM.find('#coachInput');
    const phase = DOM.find('#sessionPhase');
    const coacheeType = DOM.find('#coacheeType');
    const urgency = DOM.find('#urgency');
    
    if (!input?.value?.trim()) {
        Utils.showToast('Bitte beschreiben Sie Ihre Coaching-Situation.', 'error');
        return;
    }
    
    const response = CoachKI.generateResponse(
        input.value.trim(),
        phase?.value || '',
        coacheeType?.value || '',
        urgency?.value || ''
    );
    
    CoachKI.displayResponse(response);
    Utils.showToast('Coach-KI Antwort generiert', 'success');
    
    console.log('üß† Coach-KI Response:', response);
};

window.clearCoachInput = function() {
    const input = DOM.find('#coachInput');
    const responseDiv = DOM.find('#coachKIResponse');
    
    if (input) input.value = '';
    if (responseDiv) responseDiv.style.display = 'none';
    
    Utils.showToast('Eingabe geleert', 'info');
};

// Coach-KI Logic
const CoachKI = {
    generateResponse(input, phase, coacheeType, urgency) {
        const inputLower = input.toLowerCase();
        
        // Notfall-Situationen erkennen
        if (inputLower.includes('suizid') || inputLower.includes('selbstverletzung') || urgency === 'Notfall') {
            return {
                category: 'NOTFALL',
                content: `<strong>üö® NOTFALL-PROTOKOLL:</strong><br><br>
                1. <strong>Sofortige Sicherstellung:</strong> Direkt ansprechen und Sicherheit evaluieren<br>
                2. <strong>Professionelle Hilfe:</strong> Umgehend an Krisenintervention/Therapeuten weiterleiten<br>
                3. <strong>Dokumentation:</strong> Gespr√§ch dokumentieren, Ma√ünahmen festhalten<br>
                4. <strong>Nachsorge:</strong> Follow-up vereinbaren, weitere Unterst√ºtzung organisieren<br><br>
                <em>‚ö†Ô∏è Dies √ºberschreitet die Coaching-Grenzen. Therapeutische Intervention erforderlich.</em>`
            };
        }
        
        // Prozess-Support
        if (inputLower.includes('prozess') || inputLower.includes('stuck') || inputLower.includes('weiter')) {
            return {
                category: 'PROZESS',
                content: `<strong>‚öôÔ∏è Prozess-Empfehlung f√ºr ${phase}:</strong><br><br>
                Basierend auf "${phase}" und Coachee-Typ "${coacheeType}" empfehle ich:<br><br>
                ‚Ä¢ <strong>Aktuelle Situation:</strong> Kurze Standortbestimmung mit dem Coachee<br>
                ‚Ä¢ <strong>N√§chster Schritt:</strong> ${this.getNextStepRecommendation(phase)}<br>
                ‚Ä¢ <strong>Methodenvorschlag:</strong> ${this.getMethodRecommendation(phase, coacheeType)}<br>
                ‚Ä¢ <strong>Zeitrahmen:</strong> ca. 15-20 Minuten f√ºr diese Intervention<br><br>
                <em>üí° Tipp: Bei Widerstand zun√§chst w√ºrdigen, dann alternative Herangehensweise anbieten.</em>`
            };
        }
        
        // Methoden-Beratung
        if (inputLower.includes('methode') || inputLower.includes('technik') || inputLower.includes('intervention')) {
            return {
                category: 'METHODIK',
                content: `<strong>üõ†Ô∏è Methodische Empfehlung:</strong><br><br>
                F√ºr Ihre Situation in "${phase}" mit "${coacheeType}" eignen sich:<br><br>
                1. <strong>Prim√§r-Methode:</strong> ${this.getPrimaryMethod(inputLower, phase)}<br>
                2. <strong>Fallback-Option:</strong> Falls Widerstand auftritt<br>
                3. <strong>Vertiefung:</strong> Bei besonders guter Resonanz<br><br>
                <strong>Konkrete Anwendung:</strong><br>
                ${this.getConcreteApplication(inputLower, coacheeType)}<br><br>
                <em>üìã Dokumentation: Notieren Sie die Wirksamkeit f√ºr zuk√ºnftige Sessions.</em>`
            };
        }
        
        // Widerstand/schwierige Situationen
        if (inputLower.includes('widerstand') || inputLower.includes('schwierig') || inputLower.includes('blockiert')) {
            return {
                category: 'WIDERSTAND',
                content: `<strong>üéØ Widerstandsarbeit:</strong><br><br>
                <strong>W√ºrdigender Ansatz:</strong><br>
                "Ich merke, dass hier etwas in Ihnen z√∂gert/bremst. Das ist v√∂llig berechtigt und sch√ºtzt Sie wahrscheinlich vor etwas. M√∂gen Sie mir erz√§hlen, was diese innere Stimme zu bedenken gibt?"<br><br>
                <strong>Positive Absicht erkunden:</strong><br>
                ‚Ä¢ Was will dieser Anteil f√ºr Sie Gutes?<br>
                ‚Ä¢ Vor was sch√ºtzt er Sie?<br>
                ‚Ä¢ Welche Erfahrungen stehen dahinter?<br><br>
                <strong>Integration statt √úberwindung:</strong><br>
                Ziel ist nicht, den Widerstand zu brechen, sondern zu verstehen und zu integrieren.<br><br>
                <em>ü§ù Denken Sie daran: Widerstand ist Information, nicht Opposition.</em>`
            };
        }
        
        // Standard-Beratung
        return {
            category: 'BERATUNG',
            content: `<strong>üí° Coach-Beratung f√ºr Ihre Situation:</strong><br><br>
            Basierend auf Ihrer Beschreibung und dem Kontext "${phase}" mit "${coacheeType}" empfehle ich:<br><br>
            <strong>Sofortige Schritte:</strong><br>
            1. Situation mit dem Coachee spiegeln und validieren<br>
            2. Gemeinsam den n√§chsten Fokus kl√§ren<br>
            3. Passende Intervention aus dem Prompt-Repository w√§hlen<br><br>
            <strong>Haltung:</strong><br>
            ‚Ä¢ Ressourcenorientiert bleiben<br>
            ‚Ä¢ Prozess vor Inhalt<br>
            ‚Ä¢ Coachee als Experte f√ºr sein Leben w√ºrdigen<br><br>
            <em>üéØ Vertrauen Sie Ihrer Coaching-Kompetenz und dem Prozess.</em>`
        };
    },

    getNextStepRecommendation(phase) {
        const steps = {
            'Phase 1: Problem & Ziel': 'GT1-GT4 f√ºr strukturierte Problemerfassung',
            'Phase 2: Analyse': 'GT5-GT7 f√ºr Tiefenanalyse und Musterkennung',
            'Phase 3: L√∂sung': 'GT8-GT11 f√ºr Zielentwicklung und Ressourcenaktivierung',
            'Phase 4: Umsetzung': 'GT12 f√ºr konkrete Handlungsplanung',
            'Meta: Prozessreflexion': 'META1-META3 f√ºr Prozessreflexion'
        };
        return steps[phase] || 'Situationsgerechte Prompt-Auswahl';
    },

    getMethodRecommendation(phase, coacheeType) {
        if (phase.includes('Phase 1')) return 'GT1-GT4 oder SF1 f√ºr Problemkl√§rung';
        if (phase.includes('Phase 2')) return 'DIAG1-DIAG5 f√ºr Tiefenanalyse';
        if (phase.includes('Phase 3')) return 'L√ñS1-L√ñS3 f√ºr L√∂sungsentwicklung';
        if (phase.includes('Phase 4')) return 'L√ñS4-L√ñS5 f√ºr Umsetzung';
        return 'META1-META3 f√ºr Prozessreflexion';
    },

    getPrimaryMethod(input, phase) {
        if (input.includes('spannungsfeld')) return 'Gei√üler GT4: Ausbalancierungsprobleme identifizieren';
        if (input.includes('team') || input.includes('gruppe')) return 'GRUPPE1: Team-Check mit strukturiertem Feedback';
        if (input.includes('vision') || input.includes('ziel')) return 'L√ñS1: Erfolgsimagination entwickeln';
        return 'SF1: Solution Finder f√ºr grundlegende Klarheit';
    },

    getConcreteApplication(input, coacheeType) {
        return `Beginnen Sie mit einer offenen Frage, nutzen Sie aktives Zuh√∂ren und spiegeln Sie das Geh√∂rte. Bei ${coacheeType} besonders auf systemische Aspekte achten.`;
    },

    displayResponse(response) {
        const responseDiv = DOM.find('#coachKIResponse');
        const contentDiv = DOM.find('#coachKIResponseContent');
        const categorySpan = DOM.find('#responseCategory');
        const followUp = DOM.find('#followUpActions');
        
        if (responseDiv && contentDiv && categorySpan && followUp) {
            responseDiv.style.display = 'block';
            contentDiv.innerHTML = response.content;
            categorySpan.textContent = response.category;
            followUp.style.display = 'block';
            
            Utils.animateElement(responseDiv, 'fade-in');
        }
    }
};

// Follow-up Aktionen
window.implementSuggestion = function() {
    Utils.showToast('Empfehlung wird in den Prompt-Editor √ºbernommen.', 'info');
};

window.getAlternativeAdvice = function() {
    askCoachKI(); // Neue Antwort generieren
};

window.deepDive = function() {
    const currentInput = DOM.find('#coachInput')?.value || '';
    const input = DOM.find('#coachInput');
    if (input) {
        input.value = currentInput + '\n\nBitte gehe tiefer ins Detail und erkl√§re die Hintergr√ºnde.';
        askCoachKI();
    }
};

// Initialisierung
document.addEventListener('DOMContentLoaded', function() {
    if (window.location.pathname.includes('index.html') || window.location.pathname === '/') {
        CoachInterface.init();
        CoachInterface.setupCoachKI(); // Coach-KI Setup hinzuf√ºgen
        console.log('üéØ Coach Interface bereit');
    }
});

// Globale Load-Funktionen f√ºr HTML onclick events
window.loadProcessSupport = function() {
    CoachInterface.loadProcessSupport();
};

window.loadMethodenBeratung = function() {
    CoachInterface.loadMethodenBeratung();
};

window.loadInterventionshilfe = function() {
    CoachInterface.loadInterventionshilfe();
};

window.loadNotfallSupport = function() {
    CoachInterface.loadNotfallSupport();
};